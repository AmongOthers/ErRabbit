{"name":"Errabbit","tagline":"Remote logging console server using Log4j. Visual Exception log view.","body":"![ErRabbit](src/main/resources/static/img/rabbit_handcuffs.png \"logo\")\r\n\r\n# Introduction\r\n\r\nErRabbit(Error Rabbit) is useful error remote tracking service with Visual View.\r\nCollecting by Log4j and ActiveMQ will make it easy compatible with other programs.\r\n\r\n## Structure\r\n\r\n![Structure](graphics/structure.png)\r\n\r\n## Web console screenshot\r\n\r\n![ScreenShot](graphics/screenshot1.png)\r\n\r\n![ScreenShot](graphics/screenshot2.png)\r\n\r\n![ScreenShot](graphics/screenshot3.png)\r\n\r\n![ScreenShot](graphics/screenshot4.png)\r\n\r\n![ScreenShot](graphics/screenshot5.png)\r\n\r\n# Requirements\r\n\r\n* Java 1.7 upper\r\n* MongoDB 2\r\n* ActiveMQ\r\n* Log4j1.2 or log4j 2 in your application(log tracking target).\r\n\r\n# Install and Using\r\n\r\n1. Run MongoDB, ActiveMQ\r\n1. Run ErRabbit\r\n1. Make a Rabbit\r\n1. Add JMS Appender to your application log4j2.xml\r\n\r\n## Download release\r\n\r\nhttps://github.com/soleaf/ErRabbit/releases\r\n\r\n## Run Dependencies\r\n\r\nErRabbit uses MongoDB and ActiveMQ.\r\n\r\n1. Run MongoDB\r\n1. ActiveMQ server\r\n\r\n## Run ErRabbit\r\n\r\n### Setup settings.properties\r\n\r\n- Edit `settings.properties`\r\n- For MongoDB and ActiveMQ.. etc Set with your sever settings.\r\n\r\n### Run\r\n\r\nRun with command `sh run.sh` <br/>\r\nOr directly command `java -jar [war filename] --spring.config.location=file:settings.properties`\r\n\r\n## Login Console and add new Rabbit.\r\n\r\n1. Connect Console with WebBrowser\r\n    `http://localhost:[port]`\r\n1. Your server port is 'server.port' on 'settings.properties' and login account is also on properties ('errabbit.security.admin.username, errabbit.security.admin.password').\r\n1. Click 'add' menu on left side.\r\n1. Make your new rabbit. (Rabbit is a namespace for tracking log like application artifact id).\r\n\r\n## Make your application connect JMS\r\n\r\nChoose method by your application log4j version.\r\n\r\n* Log4j 1.2\r\n* Log4j 2.x\r\n\r\n### Setup for Log4j 1.2\r\n\r\nBecause Default JMS Appender on Log4j1 did not support queue, ErRabbit made a custom appender.\r\nThere is dependency for our custom appender.\r\n\r\n#### Add Dependencies to maven `pom.xml`\r\n\r\n```xml\r\n<dependency>\r\n    <groupId>org.mintcode.errabbit</groupId>\r\n    <artifactId>log4j-apeender</artifactId>\r\n    <version>1.0.0</version>\r\n</dependency>\r\n```\r\n\r\n#### Setup log4j.xml\r\n\r\n1. Declare 'errabbit' appender to `log4j.xml` with your ActiveMQ URL, userName, password, rabbitID\r\n\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<!DOCTYPE log4j:configuration SYSTEM \"log4j.dtd\">\r\n<log4j:configuration xmlns:log4j=\"http://jakarta.apache.org/log4j/\">\r\n\r\n    <!-- Console view -->\r\n    <appender name=\"console\" class=\"org.apache.log4j.ConsoleAppender\">\r\n        <layout class=\"org.apache.log4j.PatternLayout\">\r\n            <param name=\"ConversionPattern\" value=\"%d [%t] %p - %C{1}.%M(%L) | %m%n\"/>\r\n        </layout>\r\n    </appender>\r\n\r\n    <appender name=\"errabbit\" class=\"org.mintcode.errabbit.log4j.Log4jAppender\">\r\n        <param name=\"host\" value=\"tcp://localhost:61616\"/>\r\n        <param name=\"rabbitID\" value=\"example\"/>\r\n        <layout class=\"org.apache.log4j.PatternLayout\">\r\n            <param name=\"ConversionPattern\" value=\"%5p [%d{HH:mm:ss}] %m%n\"/>\r\n        </layout>\r\n    </appender>\r\n\r\n    <logger name=\"org.mintcode.errabbit.example\">\r\n        <level value=\"ERROR\"/>\r\n        <appender-ref ref=\"errabbit\"/>\r\n    </logger>\r\n\r\n    <!-- Root Logger -->\r\n    <root>\r\n        <priority value=\"INFO\" />\r\n        <appender-ref ref=\"console\" />\r\n    </root>\r\n\r\n</log4j:configuration>\r\n```\r\n\r\nCustomAppender's source : https://github.com/soleaf/ErRabbit-log4j-apeender\r\n\r\n#### Use In Application Code\r\n\r\nYou can collect all kind of log(info, debug, trace .. etc). But, for your application performance,\r\nuse only as exception error logging.\r\n\r\n1. Get Log4j Logger\r\n\r\n```java\r\nLogger logger = Logger.getLogger(getClass());\r\n```\r\n\r\n1. Log error with exception, Just type `logger.error([message],e)`\r\n\r\n```java\r\ntry{\r\n    int a[] = new int[2];\r\n    System.out.println(\"Access element three :\" + a[3]);\r\n}\r\ncatch (Exception e){\r\n    logger.error(e.getMessage(),e);\r\n}\r\n```\r\n\r\nExample Project : https://github.com/soleaf/ErRabbit-Example-log4j1\r\n\r\n\r\n### Setup for Log4j 2.x\r\n\r\n#### Add Dependencies to maven `pom.xml`\r\n\r\n```xml\r\n<dependency>\r\n    <groupId>javax.jms</groupId>\r\n    <artifactId>jms</artifactId>\r\n    <version>1.1</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.apache.activemq</groupId>\r\n    <artifactId>activemq-core</artifactId>\r\n    <version>5.7.0</version>\r\n</dependency>\r\n```\r\n\r\n#### Setup Log4j2\r\n\r\n1. Declare 'JMS Appender' to `log4j2.xml` with your ActiveMQ URL, userName, password.\r\n1. 'queueBindingName' should be 'errabbit.report.[RabbitID]'.\r\n1. And add JMS Appender to Loggers.\r\n\r\n\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<Configuration status=\"info\" name=\"MyApp\" packages=\"org.mintcode.errabbit.example\">\r\n<Appenders>\r\n    <JMS name=\"errabbit\"\r\n         queueBindingName=\"errabbit.report.example\"\r\n         factoryBindingName=\"ConnectionFactory\"\r\n         providerURL = \"tcp://localhost:61616\"\r\n         userName = \"sender\"\r\n         password = \"senderpassword!\"\r\n            />\r\n    <Console name=\"STDOUT\" target=\"SYSTEM_OUT\">\r\n        <PatternLayout pattern=\"%m%n\"/>\r\n    </Console>\r\n</Appenders>\r\n<Loggers>\r\n    <Logger name=\"org.mintcode.errabbit.example\" level=\"error\">\r\n        <AppenderRef ref=\"errabbit\"/>\r\n    </Logger>\r\n    <Root level=\"error\">\r\n        <AppenderRef ref=\"STDOUT\"/>\r\n    </Root>\r\n</Loggers>\r\n</Configuration>\r\n\r\n```\r\n\r\n#### Setup jndi.properties\r\n\r\n1. Make `java/main/resource/jndi.properties`, and put same ActiveMQ settings(username, password, rabbitID).\r\n\r\n```\r\njava.naming.factory.initial = org.apache.activemq.jndi.ActiveMQInitialContextFactory\r\njava.naming.provider.url = tcp://localhost:61616\r\nqueue.errabbit.report.example = errabbit.report.example\r\n```\r\n\r\n#### Use In Application Code\r\n\r\nErRabbit uses Log4j2 JMS Appender, and collects exceptions with other information logs.\r\nYou can collect all kind of log(info, debug, trace .. etc). But, for your application performance,\r\nuse only as exception error logging.\r\n\r\n1. Get Log4j Logger\r\n\r\n```java\r\nLogger logger = LogManager.getLogger(getClass());\r\n```\r\n\r\n1. Log error with exception, Just type `logger.error([message],e)`\r\n\r\n```java\r\ntry{\r\n    int a[] = new int[2];\r\n    System.out.println(\"Access element three :\" + a[3]);\r\n}\r\ncatch (Exception e){\r\n    logger.error(e.getMessage(),e);\r\n}\r\n```\r\n\r\nExample Project : https://github.com/soleaf/ErRabbit-Example-log4j2\r\n\r\n# Next : ToDo\r\n\r\n* Alarm warning\r\n* Integration with VCS\r\n* Mobile support\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}